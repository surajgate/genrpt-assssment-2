from typing import TypedDict, Optional, Literal
from langgraph.graph import END, StateGraph

# Import your existing chains
from sql_chain import (
    answer_question_via_database,
    get_sql_confidence_score
)
from pdf_response_chain import generate_answer_from_pdf_context
from user_query_rephrasing import generate_rephrased_query


class RouterState(TypedDict):
    """Represents the state shared between nodes in the router workflow.

    Attributes:
        original_question: The original question asked by the user.
        current_question: The current version of the question (original or rephrased).
        sql_answer: Answer generated by the SQL chain.
        sql_query: SQL query generated and executed.
        sql_confidence: Confidence score of the SQL answer.
        pdf_answer: Answer generated from PDF documents.
        pdf_confidence: Confidence score of the PDF answer.
        final_answer: Final answer selected for the user.
        attempted_rephrase: Whether the original question has already been rephrased.
        rephrased_question: The rephrased version of the question (if any).
        next_step: The next step to take in the workflow.
    """
    original_question: str
    current_question: str
    sql_answer: Optional[str]
    sql_query: Optional[str]
    sql_confidence: Optional[float]
    pdf_answer: Optional[str]
    pdf_confidence: Optional[float]
    final_answer: Optional[str]
    attempted_rephrase: bool
    rephrased_question: Optional[str]
    next_step: Optional[Literal["select_final_answer", "rephrase_question"]]


CONFIDENCE_THRESHOLD = 0.7


def execute_both_chains(state: RouterState) -> RouterState:
    """Runs both the SQL and PDF chains to get parallel answers.

    Args:
        state: The current state including the user's question.

    Returns:
        Updated state including both SQL and PDF answers and their confidence scores.
    """
    question = state["current_question"]

    # Execute SQL chain
    sql_question, sql_query, sql_answer = answer_question_via_database(
        question)
    sql_confidence = get_sql_confidence_score(
        sql_question, sql_query, sql_answer)

    # Execute PDF chain
    pdf_answer, pdf_confidence = generate_answer_from_pdf_context(question)

    return {
        "sql_answer": sql_answer,
        "sql_query": sql_query,
        "sql_confidence": sql_confidence,
        "pdf_answer": pdf_answer,
        "pdf_confidence": pdf_confidence,
        "current_question": question,
        "next_step": None  # Clear any previous next_step
    }


def evaluate_results(state: RouterState) -> RouterState:
    """Evaluates the confidence of answers and decides next step.

    Returns:
        Updated state with next_step set based on confidence evaluation.
    """
    max_confidence = max(state.get("sql_confidence", 0),
                         state.get("pdf_confidence", 0))

    if max_confidence >= CONFIDENCE_THRESHOLD or state["attempted_rephrase"]:
        return {"next_step": "select_final_answer"}
    else:
        return {"next_step": "rephrase_question"}


def rephrase_question(state: RouterState) -> RouterState:
    """Rephrases the original question and prepares the state for a retry.

    Args:
        state: The current router state.

    Returns:
        Updated state with rephrased question and reset answer fields.
    """
    rephrased = generate_rephrased_query(state["original_question"])

    return {
        "current_question": rephrased,
        "attempted_rephrase": True,
        "rephrased_question": rephrased,
        "sql_answer": None,
        "sql_query": None,
        "sql_confidence": None,
        "pdf_answer": None,
        "pdf_confidence": None,
        "next_step": None
    }


def select_final_answer(state: RouterState) -> RouterState:
    """Selects the best answer based on confidence scores from SQL and PDF chains.

    Args:
        state: The current router state.

    Returns:
        Updated state with the selected final answer.
    """
    sql_conf = state.get("sql_confidence", 0)
    pdf_conf = state.get("pdf_confidence", 0)

    if sql_conf >= pdf_conf and sql_conf > 0:
        return {"final_answer": state["sql_answer"]}
    elif pdf_conf > 0:
        return {"final_answer": state["pdf_answer"]}
    else:
        return {"final_answer": "Sorry, I couldn't find a confident answer to your question."}


def create_router_workflow():
    """Builds and compiles the router agent workflow using LangGraph.

    Returns:
        A compiled workflow that executes SQL/PDF chains, rephrases questions, and selects the best answer.
    """
    workflow = StateGraph(RouterState)

    # Define nodes
    workflow.add_node("execute_both_chains", execute_both_chains)
    workflow.add_node("evaluate_results", evaluate_results)
    workflow.add_node("rephrase_question", rephrase_question)
    workflow.add_node("select_final_answer", select_final_answer)

    # Define transitions
    workflow.add_edge("execute_both_chains", "evaluate_results")

    # Conditional edge based on next_step
    workflow.add_conditional_edges(
        "evaluate_results",
        lambda state: state.get("next_step", "select_final_answer"),
        {
            "select_final_answer": "select_final_answer",
            "rephrase_question": "rephrase_question"
        }
    )

    workflow.add_edge("rephrase_question", "execute_both_chains")
    workflow.add_edge("select_final_answer", END)

    # Set entry point
    workflow.set_entry_point("execute_both_chains")

    return workflow.compile()


# Create the workflow instance
router_workflow = create_router_workflow()


def answer_question(question: str) -> dict:
    """Handles user questions using the router workflow and returns final response.

    Args:
        question: The user's original question.

    Returns:
        A dictionary containing:
        - answer: The final response
        - source: Which data source provided the answer ('sql' or 'pdf')
        - confidence: The confidence score (0-1)
        - was_rephrased: Boolean indicating if question was rephrased
        - original_question: The initial user question
        - final_question: The question version that produced the answer
        - sql_query: The generated SQL query (if SQL source was used)
    """
    initial_state = {
        "original_question": question,
        "current_question": question,
        "sql_answer": None,
        "sql_query": None,
        "sql_confidence": None,
        "pdf_answer": None,
        "pdf_confidence": None,
        "final_answer": None,
        "attempted_rephrase": False,
        "rephrased_question": None,
        "next_step": None
    }

    result = router_workflow.invoke(initial_state)

    # Determine which source provided the answer
    source = "none"
    if result.get("sql_confidence", 0) > result.get("pdf_confidence", 0):
        source = "sql"
    elif result.get("pdf_confidence", 0) > 0:
        source = "pdf"

    return {
        "answer": result["final_answer"],
        "source": source,
        "confidence": max(result.get("sql_confidence", 0), result.get("pdf_confidence", 0)),
        "was_rephrased": result["attempted_rephrase"],
        "original_question": result["original_question"],
        "final_question": result["current_question"],
        "sql_query": result.get("sql_query")
    }


if __name__ == "__main__":
    # Example usage and testing
    questions: list[str] = [
        # SQL-Oriented Questions (Structured Data)
        "List all matches played by Chennai Super Kings in 2023",
        "Show the top 5 batsmen with highest strike rates in IPL 2023",
        "Which team won the most matches in 2022?",
        "List all matches where the winning margin was less than 10 runs",
        "What is the average first innings score at Wankhede Stadium?",
        "Which player has scored the most centuries in IPL history?",
        "Show the complete schedule for Mumbai Indians in 2023",
        "List all matches where a team scored over 200 runs",
        "Which bowler has the best economy rate in death overs?",
        "What is the head-to-head record between RCB and KKR?",

        # PDF-Oriented Questions (Unstructured Text)
        "What is the home ground of Punjab Kings?",
        "Tell me about MS Dhoni's captaincy style",
        "What are the key features of IPL's impact player rule?",
        "Describe the controversy around the 2022 mega auction",
        "Explain how the IPL playoffs format works",
        "What was the most expensive player purchase in IPL 2023?",
        "Describe the pitch conditions at Eden Gardens",
        "What are the different jersey colors used by Rajasthan Royals?",
        "Tell me about the history of Deccan Chargers franchise",
        "What records does Virat Kohli hold in the IPL?",

        # Mixed-Type Questions (Could use either source)
        "Who won the IPL in 2020 and what was special about that season?",
        "Compare the performance of Hardik Pandya in 2022 vs 2023",
        "What is the home ground of Sunrisers Hyderabad and their win percentage there?",
        "List all orange cap winners and their total runs each season",
        "Which teams have changed their names in IPL history and why?",

        # Analytical Questions
        "What is the correlation between toss wins and match wins?",
        "Which venue has the highest average first innings score?",
        "How does team performance vary between day and night matches?",
        "What percentage of matches are won by the team batting first?",
        "Which season had the most close finishes (matches decided by <10 runs or <1 over)?",

        # Comparative Questions
        "Compare the batting averages of Kohli and Rohit Sharma in IPL",
        "How does RCB's home record compare to their away record?",
        "Which is more successful - teams with strong batting or strong bowling?",
        "Compare the win percentages of teams with Indian vs foreign captains",

        # Time-Based Questions
        "How has the average score per match changed over the years?",
        "List the winners from each season in chronological order",
        "What was the highest score in the 2010-2015 period?",
        "Show the evolution of team compositions over the years",

        # Player-Specific Questions
        "What is Suryakumar Yadav's performance against spin bowling?",
        "List all teams David Warner has played for in IPL",
        "What is Jasprit Bumrah's bowling average in powerplays?",
        "Against which team does KL Rahul have his highest score?",

        # Team Strategy Questions
        "What is Mumbai Indians' success rate when chasing?",
        "How often does CSK use spinners in middle overs?",
        "What is RCB's win percentage when Kohli scores a fifty?",
        "How does Delhi Capitals perform in afternoon matches?",

        # Boundary Analysis
        "Which team hits the most sixes in death overs?",
        "What percentage of Rajasthan Royals' runs come from boundaries?",
        "Compare the boundary percentages of teams in first vs second innings",

        # Special Cases
        "List all super overs in IPL history and their results",
        "Which matches had the highest attendance records?",
        "What are the most unusual dismissals in IPL?",
        "List instances where a hat-trick was taken in losing cause"
    ]

    for question in questions:
        print(f"\nOriginal Question: {question}")
        result = answer_question(question)
        print(f"Final Question: {result['final_question']}")
        print(f"Answer: {result['answer']}")
        print(
            f"Source: {result['source']} (confidence: {result['confidence']:.2f})")
        print(f"Rephrased: {result['was_rephrased']}")
        if result.get("sql_query"):
            print(f"SQL Query: {result['sql_query']}")
        print("=" * 80)
